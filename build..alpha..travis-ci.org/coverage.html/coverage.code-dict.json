{"/home/travis/build/npmtest/node-npmtest-chai-http/test.js":"/* istanbul instrument in package npmtest_chai_http */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chai-http/lib.npmtest_chai_http.js":"/* istanbul instrument in package npmtest_chai_http */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_chai_http = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_chai_http = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-chai-http/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-chai-http && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_chai_http */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_chai_http\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_chai_http.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_chai_http.rollup.js'] =\n            local.assetsDict['/assets.npmtest_chai_http.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_chai_http.__dirname + '/lib.npmtest_chai_http.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chai-http/node_modules/chai-http/index.js":"module.exports = (process && process.env && process.env.CHAIHTTP_COV)\n  ? require('./lib-cov/http')\n  : require('./lib/http');\n","/home/travis/build/npmtest/node-npmtest-chai-http/node_modules/chai-http/lib/http.js":"/*!\n * chai-http\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ## Assertions\n *\n * The Chai HTTP module provides a number of assertions\n * for the `expect` and `should` interfaces.\n */\n\nmodule.exports = function (chai, _) {\n\n  /*!\n   * Module dependencies.\n   */\n\n  var net = require('net');\n  var qs = require('qs');\n  var url = require('url');\n  var Cookie = require('cookiejar');\n\n  /*!\n   * Aliases.\n   */\n\n  var Assertion = chai.Assertion\n    , i = _.inspect;\n\n  /*!\n   * Expose request builder\n   */\n\n  chai.request = require('./request');\n\n  /*!\n   * Content types hash. Used to\n   * define `Assertion` properties.\n   *\n   * @type {Object}\n   */\n\n  var contentTypes = {\n      json: 'application/json'\n    , text: 'text/plain'\n    , html: 'text/html'\n  };\n\n  /*!\n   * Return a header from `Request` or `Response` object.\n   *\n   * @param {Request|Response} object\n   * @param {String} Header\n   * @returns {String|Undefined}\n   */\n\n  function getHeader(obj, key) {\n    if (key) key = key.toLowerCase();\n    if (obj.getHeader) return obj.getHeader(key);\n    if (obj.headers) return obj.headers[key];\n  };\n\n  /**\n   * ### .status (code)\n   *\n   * Assert that a response has a supplied status.\n   *\n   * ```js\n   * expect(res).to.have.status(200);\n   * ```\n   *\n   * @param {Number} status number\n   * @name status\n   * @api public\n   */\n\n  Assertion.addMethod('status', function (code) {\n    new Assertion(this._obj).to.have.property('status');\n    var status = this._obj.status;\n\n    this.assert(\n        status == code\n      , 'expected #{this} to have status code #{exp} but got #{act}'\n      , 'expected #{this} to not have status code #{act}'\n      , code\n      , status\n    );\n  });\n\n  /**\n   * ### .header (key[, value])\n   *\n   * Assert that a `Response` or `Request` object has a header.\n   * If a value is provided, equality to value will be asserted.\n   * You may also pass a regular expression to check.\n   *\n   * __Note:__ When running in a web browser, the\n   * [same-origin policy](https://tools.ietf.org/html/rfc6454#section-3)\n   * only allows Chai HTTP to read\n   * [certain headers](https://www.w3.org/TR/cors/#simple-response-header),\n   * which can cause assertions to fail.\n   *\n   * ```js\n   * expect(req).to.have.header('x-api-key');\n   * expect(req).to.have.header('content-type', 'text/plain');\n   * expect(req).to.have.header('content-type', /^text/);\n   * ```\n   *\n   * @param {String} header key (case insensitive)\n   * @param {String|RegExp} header value (optional)\n   * @name header\n   * @api public\n   */\n\n  Assertion.addMethod('header', function (key, value) {\n    var header = getHeader(this._obj, key);\n\n    if (arguments.length < 2) {\n      this.assert(\n          'undefined' !== typeof header || null === header\n        , 'expected header \\'' + key + '\\' to exist'\n        , 'expected header \\'' + key + '\\' to not exist'\n      );\n    } else if (arguments[1] instanceof RegExp) {\n      this.assert(\n          value.test(header)\n        , 'expected header \\'' + key + '\\' to match ' + value + ' but got ' + i(header)\n        , 'expected header \\'' + key + '\\' not to match ' + value + ' but got ' + i(header)\n        , value\n        , header\n      );\n    } else {\n      this.assert(\n          header == value\n        , 'expected header \\'' + key + '\\' to have value ' + value + ' but got ' + i(header)\n        , 'expected header \\'' + key + '\\' to not have value ' + value\n        , value\n        , header\n      );\n    }\n  });\n\n  /**\n   * ### .headers\n   *\n   * Assert that a `Response` or `Request` object has headers.\n   *\n   * __Note:__ When running in a web browser, the\n   * [same-origin policy](https://tools.ietf.org/html/rfc6454#section-3)\n   * only allows Chai HTTP to read\n   * [certain headers](https://www.w3.org/TR/cors/#simple-response-header),\n   * which can cause assertions to fail.\n   *\n   * ```js\n   * expect(req).to.have.headers;\n   * ```\n   *\n   * @name headers\n   * @api public\n   */\n\n  Assertion.addProperty('headers', function () {\n    this.assert(\n        this._obj.headers || this._obj.getHeader\n      , 'expected #{this} to have headers or getHeader method'\n      , 'expected #{this} to not have headers or getHeader method'\n    );\n  });\n\n  /**\n   * ### .ip\n   *\n   * Assert that a string represents valid ip address.\n   *\n   * ```js\n   * expect('127.0.0.1').to.be.an.ip;\n   * expect('2001:0db8:85a3:0000:0000:8a2e:0370:7334').to.be.an.ip;\n   * ```\n   *\n   * @name ip\n   * @api public\n   */\n\n  Assertion.addProperty('ip', function () {\n    this.assert(\n        net.isIP(this._obj)\n      , 'expected #{this} to be an ip'\n      , 'expected #{this} to not be an ip'\n    );\n  });\n\n  /**\n   * ### .json / .text / .html\n   *\n   * Assert that a `Response` or `Request` object has a given content-type.\n   *\n   * ```js\n   * expect(req).to.be.json;\n   * expect(req).to.be.html;\n   * expect(req).to.be.text;\n   * ```\n   *\n   * @name json\n   * @name html\n   * @name text\n   * @api public\n   */\n\n  function checkContentType (name) {\n    var val = contentTypes[name];\n\n    Assertion.addProperty(name, function () {\n      new Assertion(this._obj).to.have.headers;\n      var ct = getHeader(this._obj, 'content-type')\n        , ins = i(ct) === 'undefined'\n          ? 'headers'\n          : i(ct);\n\n      this.assert(\n          ct && ~ct.indexOf(val)\n        , 'expected ' + ins + ' to include \\'' + val + '\\''\n        , 'expected ' + ins + ' to not include \\'' + val + '\\''\n      );\n    });\n  }\n\n  Object\n    .keys(contentTypes)\n    .forEach(checkContentType);\n\n  /**\n   * ### .redirect\n   *\n   * Assert that a `Response` object has a redirect status code.\n   *\n   * ```js\n   * expect(res).to.redirect;\n   * ```\n   *\n   * @name redirect\n   * @api public\n   */\n\n  Assertion.addProperty('redirect', function() {\n    var redirectCodes = [301, 302, 303]\n      , status = this._obj.status\n      , redirects = this._obj.redirects;\n\n    this.assert(\n        redirectCodes.indexOf(status) >= 0 || redirects && redirects.length\n      , \"expected redirect with 30{1-3} status code but got \" + status\n      , \"expected not to redirect but got \" + status + \" status\"\n    );\n  });\n\n  /**\n   * ### .redirectTo\n   *\n   * Assert that a `Response` object redirects to the supplied location.\n   *\n   * ```js\n   * expect(res).to.redirectTo('http://example.com');\n   * ```\n   *\n   * @param {String} location url\n   * @name redirectTo\n   * @api public\n   */\n\n  Assertion.addMethod('redirectTo', function(destination) {\n    var redirects = this._obj.redirects;\n\n    new Assertion(this._obj).to.redirect;\n\n    if(redirects && redirects.length) {\n      this.assert(\n        redirects.indexOf(destination) > -1\n        , 'expected redirect to ' + destination + ' but got ' + redirects.join(' then ')\n        , 'expected not to redirect to ' + destination + ' but got ' + redirects.join(' then ')\n      );\n    } else {\n      var assertion = new Assertion(this._obj);\n      _.transferFlags(this, assertion);\n      assertion.with.header('location', destination);\n    }\n  });\n\n  /**\n   * ### .param\n   *\n   * Assert that a `Request` object has a query string parameter with a given\n   * key, (optionally) equal to value\n   *\n   * ```js\n   * expect(req).to.have.param('orderby');\n   * expect(req).to.have.param('orderby', 'date');\n   * expect(req).to.not.have.param('limit');\n   * ```\n   *\n   * @param {String} parameter name\n   * @param {String} parameter value\n   * @name param\n   * @api public\n   */\n\n  Assertion.addMethod('param', function(name, value) {\n    var assertion = new Assertion();\n    _.transferFlags(this, assertion);\n    assertion._obj = qs.parse(url.parse(this._obj.url).query);\n    assertion.property.apply(assertion, arguments);\n  });\n\n  /**\n   * ### .cookie\n   *\n   * Assert that a `Request` or `Response` object has a cookie header with a\n   * given key, (optionally) equal to value\n   *\n   * ```js\n   * expect(req).to.have.cookie('session_id');\n   * expect(req).to.have.cookie('session_id', '1234');\n   * expect(req).to.not.have.cookie('PHPSESSID');\n   * expect(res).to.have.cookie('session_id');\n   * expect(res).to.have.cookie('session_id', '1234');\n   * expect(res).to.not.have.cookie('PHPSESSID');\n   * ```\n   *\n   * @param {String} parameter name\n   * @param {String} parameter value\n   * @name param\n   * @api public\n   */\n\n  Assertion.addMethod('cookie', function (key, value) {\n    var header = getHeader(this._obj, 'set-cookie')\n      , cookie;\n\n    if (!header) {\n       header = (getHeader(this._obj, 'cookie') || '').split(';');\n    }\n\n    cookie = Cookie.CookieJar();\n    cookie.setCookies(header);\n    cookie = cookie.getCookie(key, new Cookie.CookieAccessInfo());\n\n    if (arguments.length === 2) {\n      this.assert(\n          cookie.value == value\n        , 'expected cookie \\'' + key + '\\' to have value #{exp} but got #{act}'\n        , 'expected cookie \\'' + key + '\\' to not have value #{exp}'\n        , value\n        , cookie.value\n      );\n    } else {\n      this.assert(\n          'undefined' !== typeof cookie || null === cookie\n        , 'expected cookie \\'' + key + '\\' to exist'\n        , 'expected cookie \\'' + key + '\\' to not exist'\n      );\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-chai-http/node_modules/chai-http/lib/net.js":"/*!\n * chai-http - request helper\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * net.isIP shim for browsers\n */\nvar isIP = require('is-ip');\n\nexports.isIP = isIP;\nexports.isIPv4 = isIP.v4;\nexports.isIPv6 = isIP.v6;\n","/home/travis/build/npmtest/node-npmtest-chai-http/node_modules/chai-http/lib/request.js":"/*!\n * chai-http - request helper\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar http = require('http')\n  , https = require('https')\n  , methods = require('methods')\n  , superagent = require('superagent')\n  , Agent = superagent.agent\n  , Request = superagent.Request\n  , util = require('util');\n\n/**\n * ## Integration Testing\n *\n * Chai HTTP provides an interface for live integration\n * testing via [superagent](https://github.com/visionmedia/superagent).\n * To do this, you must first\n * construct a request to an application or url.\n *\n * Upon construction you are provided a chainable api that\n * allows you to specify the http VERB request (get, post, etc)\n * that you wish to invoke.\n *\n * #### Application / Server\n *\n * You may use a function (such as an express or connect app)\n * or a node.js http(s) server as the foundation for your request.\n * If the server is not running, chai-http will find a suitable\n * port to listen on for a given test.\n *\n * __Note:__ This feature is only supported on Node.js, not in web browsers.\n *\n * ```js\n * chai.request(app)\n *   .get('/')\n * ```\n *\n * #### URL\n *\n * You may also use a base url as the foundation of your request.\n *\n * ```js\n * chai.request('http://localhost:8080')\n *   .get('/')\n * ```\n *\n * #### Setting up requests\n *\n * Once a request is created with a given VERB, it can have headers, form data,\n * json, or even file attachments added to it, all with a simple API:\n *\n * ```js\n * // Send some JSON\n * chai.request(app)\n *   .put('/user/me')\n *   .set('X-API-Key', 'foobar')\n *   .send({ password: '123', confirmPassword: '123' })\n * ```\n *\n * ```js\n * // Send some Form Data\n * chai.request(app)\n *   .post('/user/me')\n *   .field('_method', 'put')\n *   .field('password', '123')\n *   .field('confirmPassword', '123')\n * ```\n *\n * ```js\n * // Attach a file\n * chai.request(app)\n *   .post('/user/avatar')\n *   .attach('imageField', fs.readFileSync('avatar.png'), 'avatar.png')\n * ```\n *\n * ```js\n * // Authenticate with Basic authentication\n * chai.request(app)\n *   .get('/protected')\n *   .auth('user', 'pass')\n * ```\n *\n * ```js\n * // Chain some GET query parameters\n * chai.request(app)\n *   .get('/search')\n *   .query({name: 'foo', limit: 10}) // /search?name=foo&limit=10\n * ```\n *\n * #### Dealing with the response - traditional\n *\n * To make the request and assert on its response, the `end` method can be used:\n *\n * ```js\n * chai.request(app)\n *   .put('/user/me')\n *   .send({ password: '123', confirmPassword: '123' })\n *   .end(function (err, res) {\n *      expect(err).to.be.null;\n *      expect(res).to.have.status(200);\n *   });\n * ```\n * ##### Caveat\n * Because the `end` function is passed a callback, assertions are run\n * asynchronously. Therefore, a mechanism must be used to notify the testing\n * framework that the callback has completed. Otherwise, the test will pass before\n * the assertions are checked.\n *\n * For example, in the [Mocha test framework](http://mochajs.org/), this is\n * accomplished using the\n * [`done` callback](https://mochajs.org/#asynchronous-code), which signal that the\n * callback has completed, and the assertions can be verified:\n *\n * ```js\n * it('fails, as expected', function(done) { // <= Pass in done callback\n *   chai.request('http://localhost:8080')\n *   .get('/')\n *   .end(function(err, res) {\n *     expect(res).to.have.status(123);\n *     done();                               // <= Call done to signal callback end\n *   });\n * }) ;\n *\n * it('succeeds silently!', function() {   // <= No done callback\n *   chai.request('http://localhost:8080')\n *   .get('/')\n *   .end(function(err, res) {\n *     expect(res).to.have.status(123);    // <= Test completes before this runs\n *   });\n * }) ;\n * ```\n *\n * When `done` is passed in, Mocha will wait until the call to `done()`, or until\n * the [timeout](http://mochajs.org/#timeouts) expires. `done` also accepts an\n * error parameter when signaling completion.\n *\n * #### Dealing with the response - Promises\n *\n * If `Promise` is available, `request()` becomes a Promise capable library -\n * and chaining of `then`s becomes possible:\n *\n * ```js\n * chai.request(app)\n *   .put('/user/me')\n *   .send({ password: '123', confirmPassword: '123' })\n *   .then(function (res) {\n *      expect(res).to.have.status(200);\n *   })\n *   .catch(function (err) {\n *      throw err;\n *   })\n * ```\n *\n * __Note:__ Node.js version 0.10.x and some older web browsers do not have\n * native promise support. You can use any promise library, such as\n * [es6-promise](https://github.com/jakearchibald/es6-promise) or\n * [kriskowal/q](https://github.com/kriskowal/q) and call the `addPromise`\n * method to use that library with Chai HTTP. For example:\n *\n * ```js\n * var chai = require('chai');\n * chai.use(require('chai-http'));\n *\n * // Add promise support if this does not exist natively.\n * if (!global.Promise) {\n *   var q = require('q');\n *   chai.request.addPromises(q.Promise);\n * }\n * ```\n *\n * #### Retaining cookies with each request\n *\n * Sometimes you need to keep cookies from one request, and send them with the\n * next. For this, `.request.agent()` is available:\n *\n * ```js\n * // Log in\n * var agent = chai.request.agent(app)\n * agent\n *   .post('/session')\n *   .send({ username: 'me', password: '123' })\n *   .then(function (res) {\n *     expect(res).to.have.cookie('sessionid');\n *     // The `agent` now has the sessionid cookie saved, and will send it\n *     // back to the server in the next request:\n *     return agent.get('/user/me')\n *       .then(function (res) {\n *          expect(res).to.have.status(200);\n *       })\n *   })\n * ```\n *\n */\n\nmodule.exports = function (app) {\n\n  /*!\n   * @param {Mixed} function or server\n   * @returns {Object} API\n   */\n\n  var server = ('function' === typeof app)\n      ? http.createServer(app)\n      : app\n    , obj = {};\n\n  methods.forEach(function (method) {\n    obj[method] = function (path) {\n      return new Test(server, method, path);\n    };\n  });\n  obj.del = obj.delete;\n\n  return obj;\n};\n\nmodule.exports.Test = Test;\nmodule.exports.Request = Test;\nmodule.exports.agent = TestAgent;\n\n/*!\n * Test\n *\n * An extension of superagent.Request,\n * this provides the same chainable api\n * as superagent so all things can be modified.\n *\n * @param {Object|String} server, app, or url\n * @param {String} method\n * @param {String} path\n * @api private\n */\n\nfunction Test (app, method, path) {\n  Request.call(this, method, path);\n  this.app = app;\n  this.url = typeof app === 'string' ? app + path : serverAddress(app, path);\n}\nutil.inherits(Test, Request);\n\nfunction serverAddress (app, path) {\n  if ('string' === typeof app) {\n    return app + path;\n  }\n  var addr = app.address();\n  if (!addr) {\n    app.listen(0);\n    addr = app.address();\n  }\n  var protocol = (app instanceof https.Server) ? 'https' : 'http';\n  // If address is \"unroutable\" IPv4/6 address, then set to localhost\n  if (addr.address === '0.0.0.0' || addr.address === '::') {\n    addr.address = '127.0.0.1';\n  }\n  return protocol + '://' + addr.address + ':' + addr.port + path;\n}\n\n\n/*!\n * agent\n *\n * Follows the same API as superagent.Request,\n * but allows persisting of cookies between requests.\n *\n * @param {Object|String} server, app, or url\n * @param {String} method\n * @param {String} path\n * @api private\n */\n\nfunction TestAgent(app) {\n  if (!(this instanceof TestAgent)) return new TestAgent(app);\n  if (typeof app === 'function') app = http.createServer(app);\n  (Agent || Request).call(this);\n  this.app = app;\n}\nutil.inherits(TestAgent, Agent || Request);\n\n// override HTTP verb methods\nmethods.forEach(function(method){\n  TestAgent.prototype[method] = function(url){\n    var req = new Test(this.app, method, url)\n      , self = this;\n\n    if (Agent) {\n      // When running in Node, cookies are managed via\n      // `Agent._saveCookies()` and `Agent._attachCookies()`.\n      req.on('response', function (res) { self._saveCookies(res); });\n      req.on('redirect', function (res) { self._saveCookies(res); });\n      req.on('redirect', function () { self._attachCookies(req); });\n      this._attachCookies(req);\n    }\n    else {\n      // When running in a web browser, cookies are managed via `Request.withCredentials()`.\n      // The browser will attach cookies based on same-origin policy.\n      // https://tools.ietf.org/html/rfc6454#section-3\n      req.withCredentials();\n    }\n\n    return req;\n  };\n});\n\nTestAgent.prototype.del = TestAgent.prototype.delete;\n"}